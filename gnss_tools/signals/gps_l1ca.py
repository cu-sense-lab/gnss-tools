from typing import Dict, List

import numpy as np

from gnss_lib.signals.type import SystemType, SignalId, SignalType
from gnss_lib.signals.utils.mls import generate_mls

CARRIER_FREQ: int = 1575420000
CODE_RATE: int = 1023000
CODE_LENGTH: int = 1023
DATA_SYMBOL_RATE: int = 50

"""
(svid, prn, ca_phase_select, x2_phase_select, ca_code_delay, p_code_delay, first_10_chips_ca, first_12_chips_p)
Tuple struct to store data from Table 3-I of the IS-GPS 200 
specification, which contains code phase assignment information for GPS L1 signal.

`ca_phase_select` is a 2-tuple in this structure.

`first_12_chips_p`, `first_10_chips_ca` are represented in octal in the table,
but should just be integer types in this structure.

Note that SVID and PRN numbers differ only for SVIDs 65-69.
"""
CODE_PHASE_ASSIGNMENTS = {
    1: (1, 1, (2, 6), 1, 5, 1, 1440, 4444),
    2: (2, 2, (3, 7), 2, 6, 2, 1620, 4000),
    3: (3, 3, (4, 8), 3, 7, 3, 1710, 4333),
    4: (4, 4, (5, 9), 4, 8, 4, 1744, 4377),
    5: (5, 5, (1, 9), 5, 17, 5, 1133, 4355),
    6: (6, 6, (2, 10), 6, 18, 6, 1455, 4344),
    7: (7, 7, (1, 8), 7, 139, 7, 1131, 4340),
    8: (8, 8, (2, 9), 8, 140, 8, 1454, 4342),
    9: (9, 9, (3, 10), 9, 141, 9, 1626, 4343),
    10: (10, 10, (2, 3), 10, 251, 10, 1504, 4343),
    11: (11, 11, (3, 4), 11, 252, 11, 1642, 4343),
    12: (12, 12, (5, 6), 12, 254, 12, 1750, 4343),
    13: (13, 13, (6, 7), 13, 255, 13, 1764, 4343),
    14: (14, 14, (7, 8), 14, 256, 14, 1772, 4343),
    15: (15, 15, (8, 9), 15, 257, 15, 1775, 4343),
    16: (16, 16, (9, 10), 16, 258, 16, 1776, 4343),
    17: (17, 17, (1, 4), 17, 469, 17, 1156, 4343),
    18: (18, 18, (2, 5), 18, 470, 18, 1467, 4343),
    19: (19, 19, (3, 6), 19, 471, 19, 1633, 4343),
    20: (20, 20, (4, 7), 20, 472, 20, 1715, 4343),
    21: (21, 21, (5, 8), 21, 473, 21, 1746, 4343),
    22: (22, 22, (6, 9), 22, 474, 22, 1763, 4343),
    23: (23, 23, (1, 3), 23, 509, 23, 1063, 4343),
    24: (24, 24, (4, 6), 24, 512, 24, 1706, 4343),
    25: (25, 25, (5, 7), 25, 513, 25, 1743, 4343),
    26: (26, 26, (6, 8), 26, 514, 26, 1761, 4343),
    27: (27, 27, (7, 9), 27, 515, 27, 1770, 4343),
    28: (28, 28, (8, 10), 28, 516, 28, 1774, 4343),
    29: (29, 29, (1, 6), 29, 859, 29, 1127, 4343),
    30: (30, 30, (2, 7), 30, 860, 30, 1453, 4343),
    31: (31, 31, (3, 8), 31, 861, 31, 1625, 4343),
    32: (32, 32, (4, 9), 32, 862, 32, 1712, 4343),
    33: (65, 33, (5, 10), 33, 863, 33, 1745, 4343),
    34: (66, 34, (4, 10), 34, 950, 34, 1713, 4343),
    35: (67, 35, (1, 7), 35, 947, 35, 1134, 4343),
    36: (68, 36, (2, 8), 36, 948, 36, 1456, 4343),
    37: (69, 37, (4, 10), 37, 950, 37, 1713, 4343),
}


def generate_code_sequence_L1CA(prn: int) -> np.ndarray[np.int8]:
    """Generates L1CA PRN code for given PRN.

    Parameters
    ----------
    prn : int
        the PRN of the signal/satellite

    Returns
    -------
    output : ndarray of shape(1023,)
        the complete binary (0/1) code sequence
    """
    ps = CODE_PHASE_ASSIGNMENTS[prn][2]
    g1 = generate_mls(10, [2, 9], [9])
    g2 = generate_mls(10, [1, 2, 5, 7, 8, 9], [ps[0] - 1, ps[1] - 1])
    code_seq_01 = (g1 + g2) % 2
    return code_seq_01.astype(np.int8)


SIGNAL_IDS: List[SignalId] = [
    SignalId(SystemType.GPS, SignalType.L1CA, prn) for prn in range(1, 33)
]
PRN_TO_SIGNAL_ID: Dict[int, SignalId] = {sig_id.prn: sig_id for sig_id in SIGNAL_IDS}

CODE_SEQUENCES = {
    prn: 1 - 2 * generate_code_sequence_L1CA(prn).astype(np.int8)
    for prn in range(1, 33)
}


# # IS-GPS-200
# def generate_GPS_L1CA_code_sequence_2(prn):
#     # use the C/A code
#     g2_delay = [
#            5,   6,   7,   8,  17,  18, 139, 140, 141, 251,   #   1- 10
#          252, 254, 255, 256, 257, 258, 469, 470, 471, 472,   #  11- 20
#          473, 474, 509, 512, 513, 514, 515, 516, 859, 860,   #  21- 30
#          861, 862, 863, 950, 947, 948, 950,  67, 103,  91,   #  31- 40
#           19, 679, 225, 625, 946, 638, 161,1001, 554, 280,   #  41- 50
#          710, 709, 775, 864, 558, 220, 397,  55, 898, 759,   #  51- 60
#          367, 299,1018, 729, 695, 780, 801, 788, 732,  34,   #  61- 70
#          320, 327, 389, 407, 525, 405, 221, 761, 260, 326,   #  71- 80
#          955, 653, 699, 422, 188, 438, 959, 539, 879, 677,   #  81- 90
#          586, 153, 792, 814, 446, 264,1015, 278, 536, 819,   #  91-100
#          156, 957, 159, 712, 885, 461, 248, 713, 126, 807,   # 101-110
#          279, 122, 197, 693, 632, 771, 467, 647, 203, 145,   # 111-120
#          175,  52,  21, 237, 235, 886, 657, 634, 762, 355,   # 121-130
#         1012, 176, 603, 130, 359, 595,  68, 386, 797, 456,   # 131-140
#          499, 883, 307, 127, 211, 121, 118, 163, 628, 853,   # 141-150
#          484, 289, 811, 202,1021, 463, 568, 904, 670, 230,   # 151-160
#          911, 684, 309, 644, 932,  12, 314, 891, 212, 185,   # 161-170
#          675, 503, 150, 395, 345, 846, 798, 992, 357, 995,   # 171-180
#          877, 112, 144, 476, 193, 109, 445, 291,  87, 399,   # 181-190
#          292, 901, 339, 208, 711, 189, 263, 537, 663, 942,   # 191-200
#          173, 900,  30, 500, 935, 556, 373,  85, 652, 310    # 201-210
#     ]
#     g1 = generate_mls(10, [2, 9], [9])
#     g2 = generate_mls(10, [1, 2, 5, 7, 8, 9], [9])
#     return (g1 + np.roll(g2, -g2_delay[prn])) % 2

# /* C/A code (IS-GPS-200) -----------------------------------------------------*/
# static short *gencode_L1CA(int prn, int *len, double *crate)
# {
#     const static short delay[]={ /* G2 delay (chips) */
#            5,   6,   7,   8,  17,  18, 139, 140, 141, 251,   /*   1- 10 */
#          252, 254, 255, 256, 257, 258, 469, 470, 471, 472,   /*  11- 20 */
#          473, 474, 509, 512, 513, 514, 515, 516, 859, 860,   /*  21- 30 */
#          861, 862, 863, 950, 947, 948, 950,  67, 103,  91,   /*  31- 40 */
#           19, 679, 225, 625, 946, 638, 161,1001, 554, 280,   /*  41- 50 */
#          710, 709, 775, 864, 558, 220, 397,  55, 898, 759,   /*  51- 60 */
#          367, 299,1018, 729, 695, 780, 801, 788, 732,  34,   /*  61- 70 */
#          320, 327, 389, 407, 525, 405, 221, 761, 260, 326,   /*  71- 80 */
#          955, 653, 699, 422, 188, 438, 959, 539, 879, 677,   /*  81- 90 */
#          586, 153, 792, 814, 446, 264,1015, 278, 536, 819,   /*  91-100 */
#          156, 957, 159, 712, 885, 461, 248, 713, 126, 807,   /* 101-110 */
#          279, 122, 197, 693, 632, 771, 467, 647, 203, 145,   /* 111-120 */
#          175,  52,  21, 237, 235, 886, 657, 634, 762, 355,   /* 121-130 */
#         1012, 176, 603, 130, 359, 595,  68, 386, 797, 456,   /* 131-140 */
#          499, 883, 307, 127, 211, 121, 118, 163, 628, 853,   /* 141-150 */
#          484, 289, 811, 202,1021, 463, 568, 904, 670, 230,   /* 151-160 */
#          911, 684, 309, 644, 932,  12, 314, 891, 212, 185,   /* 161-170 */
#          675, 503, 150, 395, 345, 846, 798, 992, 357, 995,   /* 171-180 */
#          877, 112, 144, 476, 193, 109, 445, 291,  87, 399,   /* 181-190 */
#          292, 901, 339, 208, 711, 189, 263, 537, 663, 942,   /* 191-200 */
#          173, 900,  30, 500, 935, 556, 373,  85, 652, 310    /* 201-210 */
#     };
#     char G1[LEN_L1CA],G2[LEN_L1CA],R1[10],R2[10],C1,C2;
#     short *code;
#     int i,j;

#     if (prn<1||MAXGPSSATNO<prn||
#         !(code=(short *)malloc(sizeof(short)*LEN_L1CA))) {
#         return NULL;
#     }
#     for (i=0;i<10;i++) R1[i]=R2[i]=-1;
#     for (i=0;i<LEN_L1CA;i++) {
#         G1[i]=R1[9];
#         G2[i]=R2[9];
#         C1=R1[2]*R1[9];
#         C2=R2[1]*R2[2]*R2[5]*R2[7]*R2[8]*R2[9];
#         for (j=9;j>0;j--) {
#             R1[j]=R1[j-1];
#             R2[j]=R2[j-1];
#         }
#         R1[0]=C1;
#         R2[0]=C2;
#     }
#     for (i=0,j=LEN_L1CA-delay[prn-1];i<LEN_L1CA;i++,j++) {
#         code[i]=-G1[i]*G2[j%LEN_L1CA];
#     }
#     *len=LEN_L1CA;
#     *crate=CRATE_L1CA;

#     return code;
# }
